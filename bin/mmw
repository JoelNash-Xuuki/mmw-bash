source $HOME/.config/mmw.config
help(){
  echo "Welcome to MMW"
  echo "Usage: mmw [option]"
  echo "Options: "
  echo "  setProj"
}

setProj(){
  sed -i "s/PROJ=.*/PROJ=$1/g" $HOME/.config/mmw.config
}

setProjLoc(){
  sed -i "s|PROJLOC=.*|PROJLOC=$1|g" $HOME/.config/mmw.config
}

setArtist(){
  sed -i "s|ARTIST=.*|ARTIST=$1|g" $HOME/.config/mmw.config
}

setTempo(){
  sed -i "s|TEMPO=.*|TEMPO=$1|g" $HOME/.config/mmw.config
}

setStartTime(){
  sed -i "s|START_TIME=.*|START_TIME=$1|g" $HOME/.config/mmw.config
}

setDur(){
  sed -i "s|DUR=.*|DUR=$1|g" $HOME/.config/mmw.config
  sed -i "s|LENGTH=.*|LENGTH=$1|g" $HOME/.config/mmw.config
}

displaySession(){
  echo $SESSION | grep -o '[0-9]'
}

setSession(){
  sed -i "s|SESSION=session/.*|SESSION=session/$1|g" \
          $HOME/.config/mmw.config
  displaySession
}

displayProj(){
  echo $PROJ
}

displayProjPath(){
  echo $PROJPATH
}

createProj(){
  if test -d $HOME/audio/; then
      echo "audio directory exists"
  else
    mkdir -p $HOME/audio/
    echo " audio directory created"
  fi

  if test -d $PROJLOC; then
      echo "Project location directory exists"
  else
    mkdir -p $PROJLOC
    echo " Project location directory created"
  fi

  if test -d $HOME/audio/$ARTIST; then
      echo "Artist directory exists"
  else
    mkdir -p $HOME/audio/$ARTIST;
    echo "Artist directory created"
  fi
  
  if test -d $PROJPATH; then
    echo "Directory exists"
  else
    read -p "$PROJPATH does not exist. Do you want to create it? (y/n): " choice
      if [[ $choice == "y" ]]; then
        mkdir $PROJPATH
        mkdir $HOME/audio/$ARTIST/$PROJ
        mkdir $HOME/audio/$ARTIST/$PROJ/stems
        #ffmpeg -f lavfi -i anullsrc=channel_layout=stereo:sample_rate=48000 -t 5 $HOME/audio/$ARTIST/$PROJ/stems/input_1.wav
        mkdir $PROJPATH/score
        mkdir $PROJPATH/.bin
        mkdir $PROJPATH/session
        mkdir $PROJPATH/sound_design
        echo "$PROJ created"
      else
        echo "$PROJ not created"
      fi
   fi
}

configRec(){
  # Set the variables
  tempo=$1
  instr_volume=$4
  drum_volume=$5
  
  # Generate the ecasound command
  ecasound_command="ecasound -n $PROJ -f:16,2,48000 \\"$'\n'
  ecasound_command+="  -a:instr -i $AUDIO$2$FILE -ea:$instr_volume \\"$'\n'
  ecasound_command+="  -a:2,3 -i jack,system,1,0 \\"$'\n'
  ecasound_command+="  -a:2 -o $AUDIO$3$FILE -ea:$drum_volume \\"$'\n'
  ecasound_command+="  -a:met -i:null -pn:metronome,$tempo -ea:1 \\"$'\n'
  ecasound_command+="  -a:instr,3,met -o jack,system"

  if [ -d "$PROJPATH/session" ]; then
    echo "$ecasound_command" > "$PROJPATH/session/rec.eca"
  else
    mkdir $PROJPATH/session
    echo "$ecasound_command" > "$PROJPATH/session/rec.eca"
  fi
  # Make the file executable
  chmod +x "$PROJPATH/session/rec.eca"
}

createLilyFile(){
cat << EOF > $SCORE
\version "2.22.0"

\header {
  tagline = "Xuuki.xyz"
  title = "Flock"
  composer = "Vyvyan"
}

\score {
  <<
    \new StaffGroup << %Melody
      \new Staff \with  { 
        instrumentName=  "Voice"
        shortInstrumentName= "Voi"
      } 
        \relative {
        \clef percussion
        \time 4/4
        \tempo 4 = 84
        r1
        \xNotesOn
        a'4.   r ges   ges r4 ges    
        des'4. r fes,   fes r4 fes
      }
    >> 
    \new StaffGroup << %Harmony
      \new Staff \with  
      { 
        instrumentName= "Harmony"
        shortInstrumentName= "Hrm"
      } \relative {
        \time 4/4
        \tempo 4 = 84
        \clef bass
        \key c \major 
        r1
        fis'1
        cis1
        cis1
        b1
        a1
        a1
        a1
        b1
        cis1
        a1
        a1
        a1
      }
    >> 
    \new StaffGroup << %Bass
       \new Staff \with { 
         instrumentName= "Bass"
         shortInstrumentName= "Bs"}
         { 
         \time 4/4
         \tempo 4 = 84
         \clef bass
         \key c \major
         r1
         r4 a, r fis,
         r r r r
         r fis, r r
         gis, r r r

         e, e, r d,
         d, r  r  r
         cis cis r r 
         r r r r

         gis,2. 
         e,2. d,8
         cis,4.
         b,,2.
         cis,1
       }
    >>
    \new StaffGroup << %Percussion
       \new Staff \with { %Snare
         instrumentName= "Snare"
         shortInstrumentName= "Sn"
       } 
       {
         \tempo 4 = 84
         \clef percussion
         \xNotesOn
         d4 d d d
         r8 r r r d r r r
         r  r r r d r r r
         r8 r r r r d r r
         r  r r r d r r r

         r8 d r r d r d d
         r  d r r r d r r
         r  r r r d r r r
         r  r r r d r r r

         d8 r r r d r r r
         r  r d r d r r r
       }

      \new Staff \with { %Brush
        instrumentName= "Brush"
        shortInstrumentName= "Bsh"
      } 
      {
        \clef percussion
        \tempo 4 = 84
        \xNotesOn
        r1
        r2 r4 d
        r2 r4 d
        r2 r4 d
        r2 r4 r

        r2 r4 d
        r2 r4 d
        r2 r4 r
        r2 r4 r
      }

      \new Staff \with { % HiHat
          instrumentName= "Hi Hat"
          shortInstrumentName= "HH" 
        }
        { 
          \clef percussion
          \tempo 4 = 84
          r1
          \xNotesOn
          d8  d  d  d  d d  d   d 
          d   d  d  d  d r  r   d   
          d   d  d  d  r r  d   d
          d   d  d  d  r d  r   r

          r8   d     r   d   r d d r
          d8   d     r   d   r d d d  
          d    d     d   r   d r d r 
          d    d     d   d   r d d d

          r d d d r d d d
          d d d d d r r d
        }

        \new Staff \with { %Kick
          instrumentName= "Kick"
          shortInstrumentName= "Kc" 
        }
        \relative { 
          \clef percussion
          \tempo 4 = 84
          r1
          r4 d r d
          d r r  r
          d r d  r
          r d d  d

          r8 d4 r d4 r8
          r8 d4 r4. d4 
          d r r r
          r d r r
        }
    >>
  >>
  \layout {}
  \midi {
    \tempo 4 = 84
  }
}
EOF
}

playSession(){
  $SESSIONNO
}

play(){
  $PROJPATH/$SESSION/play.eca
}

buildSheetMusic(){
  sheetbuilder $1 $2 $3 $4 $5 $6
}

createScorePDFAndMIDIFiles(){
  lilypond -dmidi-extension=mid --output=$HOME/$PROJLOC/$PROJ $SCORE
  #lilypond-book --output=out --format=html $1.lytex
}

createSoundDesign(){
  modsyn $1 $2
}

renderAudio(){
  csound -d -o$PROJPATH/$PROJ.wav -F $PROJPATH/tmp/$PROJ.mid $PROJPATH/sound_design/$PROJ.csd
}

mvAudioToSite(){
  mv $PROJPATH/$PROJ.wav $HOME/Xuuki_Site_Node/site-app/public/audio/$PROJ.wav
}

convertAudio(){
  trackName="$1"
  channelNo="$2"  
  ffmpeg -i input_audio.wav -map_channel 0.$channelNo.0 $trackName.wav
}

createScorePDFandMIDI(){
  # originally used source $HOME/projects_/Flock/config
  lilypond -dmidi-extension=mid $LILY
  mv $PROJ.mid $PROJ.pdf $PROJPATH/
  #lilypond-book --output=out --format=html $1.lytex
  echo "Created $LILY"
}

prodScoreAudio(){
  # source $HOME/projects_/Flock/config
  rm $HOME/audio/$ARTIST/$PROJ/stems/$PROJ.wav
  csound -d -o$HOME/audio/$ARTIST/$PROJ/stems/$PROJ.wav -F $PROJPATH/$PROJ.mid $PROJPATH/sound_design/$PROJ.orc $PROJPATH/sound_design/$PROJ.sco
}

makeTrack(){ # make track sound design 
  # Check if the user provided exactly two arguments
  if [ $# -ne 2 ]; then
      echo "Usage: $0 <trackName> <channelNumber>"
      exit 1
  fi
  
  trackName="$1"
  channelNo="$2"

  trackNameCaps=$(echo "$1" | tr '[:lower:]' '[:upper:]')
  echo "$trackNameCaps=$HOME/audio/$ARTIST/$PROJ/stems/$trackName.wav" >> $HOME/.config/mmw.config
  
  trackNameOrc="
  sr      =      48000
  kr      =      480
  ksmps   =      100
  nchnls  =      1
  0dbfs	=      1
  
  garvb 	     	  init      0
  gacmb	     	  init      0
    
  		  instr      1			
  		  idec       =       0.021
  		  kenv       expsegr 0.02, idec, 1, idec, 0.01
                    idur	     =	p3	
                    iamp	     =	p4	
                    ispd       =  p5
                    ;ipch      =  261.6256
  	          iwave      =	p6	
                    ifpch      =	p7	
  	  	  ifenv	     =	p8
  	  	  iacc	     =	p9
  		  ipan	     =	p10
  		  ifpwm	     =	p11
  		  ifvcf	     =  p12
  	          ifres      =  p13		
  		  ifsamp     =  p14
  		  ifhpf	     =  p15
                    ifsampSpd  =  p16	
  		  irvbsnd    =	p17
  		  icmbsnd    =  p18
                    ilength    =	ftlen(ifpch)	
                    ilenv	     =	ftlen(ifenv)	
                    ilpwm	     =	ftlen(ifpwm)	
  	  	  ilvcf      =  ftlen(ifvcf)
  	  	  ires	     =  ftlen(ifres)
  	  	  ilhpf      =  ftlen(ifvcf)
  	  	  ilsamp     =  ftlen(ifsamp)
  	  	  ilsampSpd  =  ftlen(ifsampSpd)
  aclock	          phasor	1/idur
  asampSpd          phasor	1/idur
  kclock	          downsamp	aclock
  ktpch	          table	kclock * ilength, ifpch, 0, 0, 1
  atenv	          table	aclock * ilenv * ilength, ifenv, 0,0, 1
  atacc	          table	aclock * ilength, iacc, 0, 0, 1
  atpan	          table	aclock * ilength, ipan, 0, 0, 1
  ktpwm	          table	kclock * ilpwm * ilength, ifpwm, 0, 0, 1
  atvcf	          table	aclock * ilvcf, ifvcf, 0, 0, 1
  atres	          table	aclock * ilpwm * ilength, ifpwm, 0, 0, 1
  athpf	          table	aclock * ilhpf, ifhpf, 0, 0, 1
  ilookup           tableng ifsamp
  kindex            = 	     (ilookup/sr) * 1
  iskip             =          int(p19*sr)          		      ; STARTING SAMPLE IN SECONDS
  ilast             =          int(sr*p3*p20)+iskip 		      ; ENDING SAMPLE IN SECONDS
  aread             line       iskip, p3, ilast    		      ; a-rate TABLE INDEX
  aindex            phasor     1/kindex
  phaseSet          = 	     0
                    aindex     = aindex + phaseSet
                    ;aindex    = aindex * ilookup
                    ;asamp     table aindex, ifsamp, 1
                    ;asamp     = asamp * iamp
  kpch	          =	     cpspch(ktpch)
  asnd              tablei     aread, p14        		      	      ; SCANS FTABLE 1
  asamp 	          loscil     kenv*iamp, 261.6256*ktpch, p14, 261.6256, 0   
  avco1	          vco	     1, kpch, iwave, ktpwm, 1, 1/(cpspch(7.00))
  avco2	          vco	     1, kpch * .994, iwave, ktpwm, 1, 1/(cpspch(7.00))
  avco	          =	     (avco1 + avco2)*0.01
  ahp	          butterhp  asamp, athpf, 1000 
  avcf	          moogvcf ahp, atvcf, 0 ;atres to be here but the sound peaks
  agate	          linseg	0, .015625, 1, idur - .03125, 1, .015625, 0
                    outs	avcf * (sqrt(1-atpan)) * agate, avcf *  sqrt(atpan) * agate
  amix		  = avcf
  garvb	          = garvb+(amix*irvbsnd)
  gacmb	          = gacmb+(amix*icmbsnd)
                    endin
  
  "
  
  echo "$trackNameOrc" > $PROJPATH/sound_design/$trackName.orc
  
  trackNameSco="
  f1	0	8192	10	1							
  ;Notes
  f100 0 8 -2	7.00 7.03 7.02 7.06	7.05 7.09 7.08 7.12
  f101 0 4 02	6.04 6.08 6.11 7.04				
  
  ;Envelopes
  f200 0 8192	-7 	0.5 4096 1 4096 1			
  f201 0 8192 	-5   	.01 128 1  8054  1	
  f202 0 8192 	-5   	.01 256 1  7926  1	
  
  ;Volume play
  f300 0 8 -2	1 1	1 1	1 1	1 1
  f301 0 4 -2	2 1	1 1	     		
  f302 0 8 -2	2 0	1 0	1 0	2 0
  
  ;Pan
  f400 0 7 -2	1 0	1 .25 .75 0	.5 .25
  f401 0 1 -2	0.5
  f402 0 5 -2	0 0.5 1 0.5 0  
  
  ;pwm
  f500 0 8192	-7 1 8192 0					
  f501 0 8192	-7 1 4096 0	4096 1
  
  ;VCF
  f600 0 8192	-7	500	 8192	6000					
  f601 0 1 -2	10000
  f602 0 1 -2	1000
  
  ;Res
  f700 0 8 -2	.1 .1 .1 .1	.1 .1 .1 .1
  f701 0 8192	-7 .9 8192 0					
  f702 0 8192	-5 .8 4096 .2 4096 .8
  
  ;HPF
  f901 0 1 -2	20
  
  ;PCH
  f9001 0 1 -2	1
  f9002 0 512  -5  .001 64 1 442 1 6 .001			
  f9003 0 512  -5  0.9 64 1 221 0.99 221 1 6 2			
  f9004 0 512  -5  0.9 32 0.999 32 1  215 1 3 1.00 4 1 122 0.999 70 0.99 15 0.9 15 0.1
  f9006 0 2 -2	0.9 0.5  
  f9005 0 512  -5  0.001 64 1 221 1 191 1 36 .001			
  f9007 0 1 -2	1.2  
  f9014 0 1 -2	1.9  
  f9015 0 1 -2	1.05 
  f9016 0 1 -2	0.5 
  f9008 0 1 -2	1.01  
  f9009 0 1 -2	2
  f9010 0 1 -2	2.01
  f9011 0 1 -2	0.99
  f9012 0 1 -2	0.97
  f9013 0 1 -2	0.95
  
  f111 0 1024 10 1
  f1001 0   8193    10  1
  
  ; Load proj wav file and point to each channel
  f1002 0 0 1 \"$WAV\" 0 1 $channelNo; 
  
  t 0 p4 ; tempo
  
  i199 0 $LENGTH 2.856 0.914 ;reverb
  i198 0 $LENGTH 0.714 0.914 ;delay
  i1   0 $LENGTH 0.55  1 100 9001 200 300 401 500 601 700 1002 901 9003 0 0 0 0 ;
  s
  
  "
  
  echo "$trackNameSco" > $PROJPATH/sound_design/$trackName.sco
  
  trackExe="
  rm $HOME/audio/$ARTIST/$PROJ/stems/$trackName.wav
  csound -d -o$HOME/audio/$ARTIST/$PROJ/stems/$trackName.wav -t$TEMPO $PROJPATH/sound_design/$trackName.orc $PROJPATH/sound_design/$trackName.sco
  "
  

  echo "$trackExe" > $PROJPATH/.bin/$trackName
  chmod +x  $PROJPATH/.bin/$trackName
  
  trackNameEWF="
  source = $HOME/audio/$ARTIST/$PROJ/stems/$trackName.wav
  offset = 0
  start-position = 0
  length = $LENGTH
  looping = false
  "
  
  echo "$trackNameEWF" > $HOME/audio/$trackName.ewf
}

makeTracks(){
  makeTrack synth 2
  makeTrack bass 3
  makeTrack snare 4                      
  makeTrack brush 5
  makeTrack hihat 6
  makeTrack kick 7
}

prodTracks(){
  $PROJPATH/.bin/synth 
  $PROJPATH/.bin/snare
  $PROJPATH/.bin/kick
  $PROJPATH/.bin/hihat
  $PROJPATH/.bin/bass
  $PROJPATH/.bin/brush
}

createSession(){
cat << EOF > $HOME/Projects/Landing/session/session_1.eca
   ecasound -n $PROJ -b:512 -t:$DUR -f:16,2,48000 \\
     -a:synth -i $SYNTH -y:$START_TIME -erc:1,2 -epp:50 -efh:500 -eadb:7.91518  \\
     -a:bass  -i $BASS  -y:$START_TIME -erc:1,2 -epp:50 -efl:80 -eadb:0 \\
     -a:snare -i $SNARE -y:$START_TIME -erc:1,2 -epp:50 -efl:10700  -eadb:2.97  \\
     -a:brush -i $BRUSH -y:$START_TIME -erc:1,2 -epp:50 -efl:2400  -eadb:-8.0 \\
     -a:hihat -i $HIHAT  -y:$START_TIME -erc:1,2 -epp:50 -ete:70,60,5 -efl:2200  -eadb:0 \\
     -a:kick -i $KICK     -y:$START_TIME -erc:1,2 -epp:50 -eadb:0 -efl:200 \\
     -a:synth,snare,brush,hihat,bass,kick -o alsa,hw:3
EOF

  chmod +x $HOME/$PROJLOC/$PROJ/session/session_1.eca
}

buildInstrSoundDesignFiles(){
  projOrc="
  sr        = 48000
  kr 	  = 4800
  ksmps	  = 10
  nchnls    = 9
  0dbfs	  = 1
  
  ; gah	  init 0
  ; gahh	  init 0
  
  ; Instr Definitions
  
  #define   voice #1#
  #define   harmony #2# 
  #define   bass #3#
  #define   snare #4#
  #define   brush #5#
  #define   hihat #6#
  #define   kick #7#
  
  ; Map Midi Channels
  massign   \$voice, \$voice
  massign   \$harmony, \$harmony
  massign   \$bass, \$bass
  massign   \$snare, \$snare
  massign   \$brush, \$brush
  massign   \$hihat, \$hihat
  massign   \$kick, \$kick 
  
  ; Globals
  gicps  	  init 256
  
            instr \$voice
  ivibdel   = 0.114
  iamp      veloc 0, 0.25
  kfrq      cpsmidib 2
  kenv      linsegr 0.001, 0.950, iamp, 0.950, 0.001
  kvibenv   linseg 0.001, ivibdel, 0.1, ivibdel, 0.001
  
  kfrq      = kfrq*1
  
  klfo      oscil kvibenv, 0.714, 1
  kindex    expon 1, 0.2, 0.30
  
  asig1     oscili  kenv*iamp, kfrq, 1
  asig2     oscili  kenv*iamp, kfrq*1.005, 1
  asig3     oscili  kenv*iamp, kfrq*.995, 2
  asig4     foscil  kenv, kfrq, 3.5, 2.5, kindex
  
  amix      = (asig1+(asig2*0.015)+(asig3*0.015)+(asig4*0.00006))*6
  anoise    rand kfrq
  ;afilt     tone adis+(anoise*0.0000005*klfo), 1000
  alpf      butterlp amix, 20000 ; cut freqs above
  ahpf      butterhp alpf, 105  ; pass fres above
            outch \$voice, (ahpf*kenv)
            endin
  
            instr \$harmony ;character
  ivibdel   = 0.714
  iamp      veloc 0, 0.25
  kfrq      cpsmidib 0.95
  kenv      linsegr 0.001, 0.614, iamp, 0.614, 0.001
  kvibenv   linseg 0.001, ivibdel, 1, ivibdel, 0.001
  
  klfo      oscil kvibenv, 0.714, 1
  kindex    expon 1, 0.2, 0.30
  
  asig1     oscili  kenv*iamp, kfrq, 1
  asig2     oscili  kenv*iamp, kfrq*1.001, 1
  asig3     oscili  kenv*iamp, kfrq*.999, 2
  asig4     foscil  kenv, kfrq, 3.5, 2.5, kindex
  
  amix      = (asig1+(asig2*0.5)+(asig3*0.01)+(asig4*0.005))*6
  anoise    rand kfrq
  ;afilt     tone adis+(anoise*0.0000025klfo), 1000
  alpf     butterlp amix, 300 ;cut freqs above
  ahpf     butterhp alpf, 100 ;pass freqs above
  
            outch \$harmony, (ahpf*kenv)
            endin
  
    instr \$bass 
  idec 	  = 3
  iamp 	  veloc 0, 1 
  kfrq 	  cpsmidib 1
  kenv 	  expsegr 0.9, idec, 0.01, 0.5, 0.001
  
  asig 	  oscili  kenv*iamp, kfrq, 1 
  
  afilt	  tone asig, 150
  
  	      outch \$bass, afilt
  		  endin
    instr \$snare
  idur 	  = 0.01
  iamp 	  veloc 0, 0.8
  ifrq 	  cpsmidib 1
  iatk	  =		.01
  irel	  =		.01
  icf1	  =		15000
  icf2	  =		100
  ibw1	  =		10
  ibw2	  =		1900
  ipan	  =		0.5
  kenv	  expseg	.001, iatk, iamp, idur/6, iamp*.4, idur-(iatk+irel+idur/6), iamp*.6, irel,.01
  asig	  rand	ifrq
  kcf		  expon	icf1, idur, icf2
  kbw		  line	ibw1, idur, ibw2
  afilt	  reson	asig*0.01, kcf, kbw, 2
  	      outch \$snare, (afilt*kenv)*ipan
  
  		  endin
  instr \$brush
  idur 	= 1.357
  iamp 	veloc 0, 0.002
  ifrq 	cpsmidib 1
  iatk	=		1.357
  irel	=		1.357
  icf1	=		22000
  icf2	=		2500
  ibw1	=		22000
  ibw2	=		15000
  ipan	=		0.5
  kenv	expseg	.001, iatk, iamp, idur/6, iamp, idur-(iatk+irel+idur/6), iamp, irel,.01
  asig	rand	ifrq
  kcf		expon	icf1, idur, icf2
  kbw		line	ibw1, idur, ibw2
  afilt	reson	asig*0.01, kcf, kbw, 2
  klfo	oscil   1.428, 0.714, 1
  		outch   \$brush, ((afilt*klfo)*kenv)*ipan
  		endin
  
  
            instr \$hihat
  idur      = 0.001
  iamp      veloc 0, 1
  ifrq      cpsmidib 1
  iatk      =                .00714
  irel      =                .0357
  icf1      =                17850
  icf2      =                714
  ibw1      =                714
  ibw2      =                7140
  ipan      =                0.5
  kenv      expseg        .001, iatk, iamp, idur/6, iamp*.4, idur-(iatk+irel+idur/6), iamp*.6, irel,.01
  
  ; ;kenv linsegr 0, .1, 1, .05, .75, .2, 0
  ;; generate a modulation signal that follows the pitch of the note
  ;  kmod = foscil(kenv, ifrq, 1) * 500
  ;;  kcut modfilt kmod, ifrq, 12
  ;
  ;; VCO
  asig      rand ifrq
  ;
  
  kcf               expon icf1, idur, icf2
  kbw               line  ibw1, idur, ibw2
  afilt     reson asig, kcf, kbw, 2
  
  ;min_value = 400
  ;max_value = 2000
  ;min_ifrq = 400
  ;max_ifrq = 2000
  ;s_ifrq = min_value + (ifrq - min_ifrq) * (max_value - min_value) / (max_ifrq - min_ifrq)
  
  ;afilp_lp   lowres  afilt, s_ifrq, 90
  
  ;
  ;
  ;;
  ;
              outch \$hihat, ((afilt*kenv)*ipan) * .02
                  endin
  
  instr \$kick
  idur		=	 0.2	
  imaxamp 	veloc 	0, 0.7
  icarrfreq	=		32.7
  imodfreq	=		40
  ilowndx		=		0.1
  indxdiff	=		5-0
  
   ;PARAMETERS DEFINING THE ADSR AMPLITUDE ENVELOPE
   ;TIMES ARE A PERCENTAGE OF p3
   ;  attack amp  = p9     attack length  = p14
   ;  decay amp   = p10    decay length   = p15
   ;  sustain amp = p11    sustain length = p16
   ;  release amp = p12    release length = p17
   ;  end amp     = p13
  
   ;;PARAMETERS DEFINING THE ADSR FREQ DEVIATION ENVELOPE
   ;;TIMES ARE A PERCENTAGE OF p3
   ;  attack amp  = p18    attack length  = p23
   ;  decay amp   = p19    decay length   = p24
   ;  sustain amp = p20    sustain length = p25
   ;  release amp = p21    release length = p26
   ;  end amp     = p22
  
  aampenv		linseg	.75, .125*idur, .8, .125*idur, 1.0, .25*idur, .15, .5*idur, .0
  adevenv		linseg	1.0, .125*idur, .0, .25*idur, .0, .25*idur, .0, .25*idur, .0
  amodosc		oscili	(ilowndx+indxdiff*adevenv)*imodfreq, imodfreq, 1
  acarosc		oscili	imaxamp*aampenv, icarrfreq+amodosc, 1
  			outch \$kick, acarosc
  			endin
  "
  
  echo "$projOrc" > $PROJPATH/sound_design/$PROJ.orc
  
  projSco="
  f0 $LENGTH
  t 0 $TEMPO
  a 0 0 0
  f1 0 1024 10 1
  f2 0 1024 10 1 0.5 0.3 0.25 0.2 0.167 0.14 0.125 .111
  f3 0 1024 10 1 0   0.3 0    0.2 0     0.14 0     .111   ; Square with a small amount of data
  f4 0 1024 10 1 1   1   1    0.7 0.5   0.3  0.1      
  "
  
  echo "$projSco" > $PROJPATH/sound_design/$PROJ.sco
}

setCard(){
  sed -i "s/CARD=.*/CARD=$1/g" $HOME/config
}

"$@"

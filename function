void SheetBuilder::collectFileSections(){
  string outputPath = this->sheetName; // Change to your output file path
  outputPath += ".ly";

  if (remove(outputPath.c_str()) != 0) {
      int err = errno;
  //std::cerr << "Error deleting existing file: " << strerror(err) << std::endl;
  } else {
      //std::cout << "Existing file deleted successfully." << std::endl;
  }

  ofstream outputFile(outputPath, std::ios::app);
  if (!outputFile) {
    cerr << "Error opening output file." << std::endl;
  }

  fprintf(this->log, "There are %d Staff Group(s)\n", this->staffGroupCount);
  fprintf(this->log, "There are %d Staff(s)\n", this->staffCount);
  fprintf(this->log, "There are %d Notes(s)\n", this->noteCount);

  // Add the sheet header
  char sheetHeader[100];
  strcpy(sheetHeader, this->sheetName);
  strcat(sheetHeader, "_Header.partial.ly");
  appendFile(sheetHeader, outputFile);
  this->patch= fopen(patchName, "r");
  char sheetStaff[100];
  strcpy(sheetStaff, this->sheetName);

  for (int i= 0; i < this->staffGroupCount; i++) { 
    // Print the group header
    char sheetStaffGroupHeader[100];
    fprintf(this->log, "Append staff group %d\n", i + 1);
    strcpy(sheetStaffGroupHeader, this->sheetName);
    string newString = "_Staff_Group_Header_" + to_string(i + 1) + ".ly";
    strcat(sheetStaffGroupHeader, newString.c_str());
    appendFile(sheetStaffGroupHeader, outputFile);

    for (int j = 0; j < this->staffCount; j++) {
      // Check if staff belongs to current staff group
      if (this->staffs[j].staffGroupIndex == i + 1) {
        char sheetStaff[100]; 
        fprintf(this->log, "Append staff %d to group %d \n", j, i + 1); 
        strcpy(sheetStaff, this->sheetName); 
        string newString = "_Staff_" + to_string(j) + ".ly";
        strcat(sheetStaff, newString.c_str());
        appendFile(sheetStaff, outputFile);
    
        for (int n = 0; n < this->noteCount; n++) {
          // Check if notes belongs to current staffj
          if (this->notes[n].staffIndex == j) {
            fprintf(this->log, "Append notes %d to staff %d \n",n, j);
            char sheetStaffNotes[100];
            strcpy(sheetStaffNotes, this->sheetName);
            string newString = "_Staff_Notes_" + to_string(n) + ".ly";
            strcat(sheetStaffNotes, newString.c_str());
            appendFile(sheetStaffNotes, outputFile);
            
          }
        }
       // Print Close Bracket          
        char sheetStaffClose[100];
        strcpy(sheetStaffClose, this->sheetName);
        strcat(sheetStaffClose, "_Staff_Close_Bracket.ly");

        fprintf(this->log, "Append staff close bracket %d\n", j);
        appendFile(sheetStaffClose, 
                   outputFile);
      }
    }

    char sheetStaffGroupClose[100];
    strcpy(sheetStaffGroupClose, this->sheetName);
    strcat(sheetStaffGroupClose, "_Staff_Group_Close_Bracket.ly");
    fprintf(this->log, "Append Group staff close %d\n", i + 1);
    appendFile(sheetStaffGroupClose, outputFile);
  }
      
    //char sheetClose[100];
  //strcpy(sheetClose, this->sheetName);
  //strcat(sheetClose, "_Close.partial.ly");
  //appendFile(sheetClose, outputFile);
  //fclose(this->patch);
 outputFile.close();
}

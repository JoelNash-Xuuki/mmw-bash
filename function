void SheetBuilder::collectFileSections(){
  string outputPath = this->sheetName; // Change to your output file path
  outputPath += ".ly";
  bool appendCloseBracket= false;
  int staffGroupCounter= 0;
  cout << "TEST TESTESTESTESTEST " << this->staffGroupCount << endl;
  //this->staffGroupCount= 0;
  //this->staffCount= 0;
  //this->noteCount= 0;

  if (remove(outputPath.c_str()) != 0) {
      int err = errno;
      //std::cerr << "Error deleting existing file: " << strerror(err) << std::endl;
  } else {
      //std::cout << "Existing file deleted successfully." << std::endl;
  }

  ofstream outputFile(outputPath, std::ios::app);

  if (!outputFile) {
    cerr << "Error opening output file." << std::endl;
  }


  char sheetHeader[100];
  strcpy(sheetHeader, this->sheetName);
  strcat(sheetHeader, "_Header.partial.ly");
  appendFile(sheetHeader, outputFile);
  this->patch= fopen(patchName, "r");
  fprintf(this->log,"Reading in patch file...\n");
  char sheetStaff[100];
  strcpy(sheetStaff, this->sheetName);

  while (true) {
    if (fscanf(this->patch, "%s", modname) == EOF) {
      break;
    }
  
    if (!strcmp(modname, "STAFFGROUP")) {
      char sheetStaff[100];
      strcpy(sheetStaff, this->sheetName);
      fprintf(this->log, "Opening %s ...\n", sheetStaff);
      string newString = "_Staff_Group_Header_" + to_string(++staffGroupCounter) + ".ly";
      strcat(sheetStaff, newString.c_str());
      if (staffGroupCounter == this->staffGroupCount) {
        char sheetStaffGroupClose[100];
        strcpy(sheetStaffGroupClose, this->sheetName);
        strcat(sheetStaffGroupClose, "_Staff_Group_Close_Bracket.ly");
        appendFile(sheetStaffGroupClose, 
               outputFile);
        staffGroupCounter= 0;
      }
      appendFile(sheetStaff, outputFile);
    //} else if (!strcmp(modname, "STAFF")) {
    //  char sheetStaff[100];
    //  strcpy(sheetStaff, this->sheetName);
    //  fprintf(this->log, "Opening %s ...\n", sheetStaff);
    //  string newString = "_Staff_" + to_string(++this->staffCount) + ".ly";
    //  strcat(sheetStaff, newString.c_str());
    //  appendFile(sheetStaff, outputFile);
    //} else if (!strcmp(modname, "NOTE")) {
    //  char sheetStaffNotes[100];
    //  strcpy(sheetStaffNotes, this->sheetName);
    //  fprintf(this->log, "Opening %s ...\n", sheetStaffNotes);
    //  string newString = "_Staff_Notes_" + to_string(++this->noteCount) + ".ly";
    //  strcat(sheetStaffNotes, newString.c_str());
    //  appendFile(sheetStaffNotes, outputFile);
    //  if (this->staffCount == 3)  {
    //      char sheetStaffClose[100];
    //      strcpy(sheetStaffClose, this->sheetName);
    //      strcat(sheetStaffClose, "_Staff_Close_Bracket.ly");
    //      appendFile(sheetStaffClose,                     
    //                  outputFile);
    //      this->staffCount=0;
    //  }
    } else {
      fprintf(stderr, "%s is an unknown module\n", modname);
    }
  }

  if (this->noteCount > 0)  {
    char sheetStaffGroupClose[100];
    strcpy(sheetStaffGroupClose, this->sheetName);
    strcat(sheetStaffGroupClose, "_Staff_Group_Close_Bracket.ly");
    appendFile(sheetStaffGroupClose, outputFile);
  }

  char sheetClose[100];
  strcpy(sheetClose, this->sheetName);
  strcat(sheetClose, "_Close.partial.ly");
  appendFile(sheetClose, outputFile);
  fclose(this->patch);
  outputFile.close();
}


void SheetBuilder::readPatchFile(){
  this->patch= fopen(patchName, "r");
  fprintf(this->log,"Reading in patch file...\n");
  while (fscanf(this->patch, "%s", modname) != EOF) {
    if (!strcmp(modname, "STAFFGROUP")) {
      readStaffGroups(staffGroups, ++this->staffGroupCount);
    } else if (!strcmp(modname, "STAFF")) {
      readStaffs(this->staffs, ++this->staffCount);
    } else if (!strcmp(modname, "NOTE")) {
      readNotes(this->notes);
    } else {
      fprintf(stderr, "%s is an unknown module\n", modname);
    }
  }
  fclose(this->patch);
}
